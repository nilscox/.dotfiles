// prettier-ignore
[
  // subword
  { "key": "alt+left", "command": "cursorWordPartLeft" },
  { "key": "alt+right", "command": "cursorWordPartRight" },
  { "key": "shift+alt+left", "command": "cursorWordPartLeftSelect" },
  { "key": "shift+alt+right", "command": "cursorWordPartRightSelect" },

  // line start / end
  { "key": "ctrl+alt+left", "command": "cursorHome" },
  { "key": "ctrl+alt+right", "command": "cursorEnd" },
  { "key": "ctrl+shift+alt+left", "command": "cursorHomeSelect" },
  { "key": "ctrl+shift+alt+right", "command": "cursorEndSelect" },

  // previous / next empty line
  { "key": "alt+up", "command": "cursorMove", "args": { "to": "prevBlankLine", "by": "wrappedLine" } },
  { "key": "alt+down", "command": "cursorMove", "args": { "to": "nextBlankLine", "by": "wrappedLine" } },
  { "key": "alt+shift+up", "command": "cursorMove", "args": { "to": "prevBlankLine", "select": true } },
  { "key": "alt+shift+down", "command": "cursorMove", "args": { "to": "nextBlankLine", "select": true } },

  // select between quotes
  { "key": "alt+'", "command": "extension.selectEitherQuote" },
  { "key": "alt+shift+'", "command": "extension.switchQuotes" },

  // select between parenthesis / brackets
  { "key": "alt+shift+9", "command": "extension.selectParenthesis" },
  { "key": "alt+shift+0", "command": "extension.selectParenthesisOuter" },
  { "key": "alt+[", "command": "extension.selectSquareBrackets" },
  { "key": "alt+]", "command": "extension.selectSquareBracketsOuter" },
  { "key": "alt+shift+[", "command": "extension.selectCurlyBrackets" },
  { "key": "alt+shift+]", "command": "extension.selectCurlyBracketsOuter" },
  { "key": "alt+shift+,", "command": "extension.selectAngleBrackets" },
  { "key": "alt+shift+.", "command": "extension.selectInTag" },

  // scroll
  { "key": "ctrl+up", "command": "editorScroll", "when": "textInputFocus", "args": { "to": "up", "by": "halfPage", "value": 1 } },
  { "key": "ctrl+down", "command": "editorScroll", "when": "textInputFocus", "args": { "to": "down", "by": "halfPage", "value": 1 } },

  // multi-cursor
  { "key": "ctrl+alt+up", "command": "editor.action.insertCursorAbove", "when": "editorTextFocus" },
  { "key": "ctrl+alt+down", "command": "editor.action.insertCursorBelow", "when": "editorTextFocus" },
  { "key": "ctrl+l", "command": "editor.action.addSelectionToNextFindMatch", "when": "editorFocus" },
  { "key": "ctrl+shift+l", "command": "editor.action.moveSelectionToNextFindMatch", "when": "editorFocus" },
  { "key": "alt+l", "command": "editor.action.addSelectionToPreviousFindMatch", "when": "editorFocus" },
  { "key": "alt+shift+l", "command": "editor.action.moveSelectionToPreviousFindMatch", "when": "editorFocus" },
  { "key": "ctrl+alt+shift+l", "command": "editor.action.selectHighlights", "when": "editorFocus" },

  // select word occurrences
  { "key": "ctrl+l", "command": "editor.action.addSelectionToNextFindMatch", "when": "editorFocus" },
  { "key": "ctrl+shift+l", "command": "editor.action.moveSelectionToNextFindMatch", "when": "editorFocus" },
  { "key": "alt+l", "command": "editor.action.addSelectionToPreviousFindMatch", "when": "editorFocus" },
  { "key": "alt+shift+l", "command": "editor.action.moveSelectionToPreviousFindMatch", "when": "editorFocus" },
  { "key": "ctrl+alt+shift+l", "command": "editor.action.selectHighlights", "when": "editorFocus" },

  // go to line
  { "key": "alt+,", "command": "workbench.action.gotoLine" },

  // move lines
  { "key": "ctrl+shift+up", "command": "editor.action.moveLinesUpAction", "when": "editorTextFocus && !editorReadonly" },
  { "key": "ctrl+shift+down", "command": "editor.action.moveLinesDownAction", "when": "editorTextFocus && !editorReadonly" },

  // cursor undo
  { "key": "alt+ctrl+z", "command": "cursorUndo"},
  { "key": "ctrl+alt+shift+z", "command": "cursorRedo" },

  // line actions
  { "key": "alt+backspace", "command": "editor.action.deleteLines" },

  // code action
  { "key": "alt+a a", "command": "editor.action.codeAction", "when": "editorTextFocus && !editorReadonly" },
  { "key": "alt+a o", "command": "editor.action.sourceAction" },
  { "key": "alt+a e", "command": "editor.action.sourceAction", "args": { "kind": "source.addMissingImports", "apply": "ifSingle" } },

  // go to next problem
  { "key": "alt+a ,", "command": "editor.action.marker.nextInFiles" },
  { "key": "alt+a alt+,", "command": "editor.action.marker.prevInFiles" },

  // transform case
  { "key": "alt+a u", "command": "editor.action.transformToUppercase" },
  { "key": "alt+a l", "command": "editor.action.transformToLowercase" },

  // snippets
  { "key": "alt+q q", "command": "editor.action.showSnippets" },
  { "key": "alt+q l", "command": "editor.action.insertSnippet", "args": { "name": "console log" } },
  { "key": "alt+q w", "command": "editor.action.insertSnippet", "args": { "name": "wrap" } },
  { "key": "alt+q p", "command": "editor.action.insertSnippet", "args": { "name": "wait" } },

  // autocomplete
  { "key": "ctrl+space", "command": "editor.action.triggerSuggest", "when": "editorTextFocus && !editorReadonly && editorHasCompletionItemProvider && !suggestWidgetVisible" },
  { "key": "ctrl+space", "command": "toggleSuggestionDetails", "when": "suggestWidgetVisible" },
  { "key": "ctrl+shift+space", "command": "editor.action.showHover", "when": "editorTextFocus" },
  { "key": "ctrl+alt+shift+space", "command": "editor.action.triggerParameterHints", "when": "editorTextFocus && editorHasSignatureHelpProvider" },

  // save
  { "key": "alt+enter", "command": "workbench.action.files.save" },
  { "key": "alt+shift+enter", "command": "workbench.action.files.saveAs" },
  { "key": "alt+ctrl+enter", "command": "workbench.action.files.saveWithoutFormatting" },
  { "key": "alt+ctrl+shift+enter", "command": "workbench.action.files.saveAll" },

  // reveal active file
  { "key": "ctrl+alt+e", "command": "revealInExplorer" },

  // copy file path
  { "key": "ctrl+alt+c", "command": "copyRelativeFilePath" },
  { "key": "ctrl+alt+shift+c", "command": "copyFilePath" },

  // close editor
  { "key": "ctrl+alt+w", "command": "workbench.action.closeOtherEditors" },
  { "key": "ctrl+alt+shift+w", "command": "workbench.action.closeAllEditors" },

  // diff
  { "key": "ctrl+o", "command": "git.openFile", "when": "isInDiffEditor" },
  { "key": "ctrl+s", "command": "git.stage", "when": "isInDiffEditor" },
  { "key": "ctrl+s", "command": "git.stageSelectedRanges", "when": "isInDiffEditor && editorHasSelection"  },
  { "key": "ctrl+u", "command": "git.unstage", "when": "isInDiffEditor" },
  { "key": "ctrl+u", "command": "git.unstageSelectedRanges", "when": "isInDiffEditor && editorHasSelection" },
  { "key": "ctrl+home", "command": "diffEditor.switchSide", "when": "inDiffEditor" },
  { "key": "ctrl+end", "command": "diffEditor.switchSide", "when": "inDiffEditor" },

  // UI
  { "key": "alt+e", "command": "workbench.explorer.fileView.focus" },
  { "key": "alt+e", "command": "workbench.action.focusFirstEditorGroup", "when": "filesExplorerFocus" },
  { "key": "alt+t", "command": "terminal.focus" },
  { "key": "alt+t", "command": "workbench.action.focusFirstEditorGroup", "when": "terminalFocus" },
  { "key": "alt+shift+t", "command": "workbench.action.togglePanel", "when": "terminalIsOpen" },
  { "key": "alt+`", "command": "workbench.action.toggleMaximizedPanel" },

  // command palette
  { "key": "shift shift", "command": "workbench.action.showCommands" },

  // open stuff
  { "key": "alt+o o", "command": "workbench.action.quickOpen" },
  { "key": "alt+o p", "command": "workbench.action.openRecent" },
  { "key": "alt+o d", "command": "workbench.action.files.openFolderInNewWindow" },
  { "key": "alt+o f", "command": "workbench.action.files.openFile" },
  { "key": "alt+o s", "command": "workbench.action.openSettingsJson" },
  { "key": "alt+o k", "command": "workbench.action.openGlobalKeybindingsFile" },

  // files manipulation
  { "key": "alt+f r", "command": "fileutils.renameFile", "when": "editorTextFocus && !editorReadonly" },
  { "key": "alt+f m", "command": "fileutils.moveFile", "when": "editorTextFocus && !editorReadonly" },
  { "key": "alt+f d", "command": "fileutils.duplicateFile", "when": "editorTextFocus && !editorReadonly" },
  { "key": "alt+f shift+d", "command": "fileutils.removeFile", "when": "editorTextFocus && !editorReadonly" },

  // UI
  { "key": "alt+j", "command": "workbench.action.toggleMaximizedPanel" },
]
